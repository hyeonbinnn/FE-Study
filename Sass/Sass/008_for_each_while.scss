// * @for
// @for은 정의한 횟수만큼 코드 실행을 반복
/* for ($변수) from (시작) through(끝) {
    반복할 내용
} */

// for문을 이용해 nth-선택자에게 각각의 image를 배경에 넣어줌
@for $i from 1 through 5 {
  .photo-box:nth-child(#{$i}) {
    background-image: url("../assets/phoster#{$i}.png");
  }
}
// 범위 1이상 5이하
// for문에서 1부터 5까지 반복하라는 의미입니다. 총 5번 반복되면서 코드가 실행된다.
// 만약 from 3 throught 8 이라면 3에서 8까지 6번 실행된다.

@for $i from 10 through 15 {
  .photo-box:nth-child(#{$i}) {
    background-image: url("../assets/img_#{$i}.png");
  }
}

// 현업에서 사용하는 믹스인
@mixin iconBg($path, $start, $end) {
  background-repeat: no-repeat;
  background-position: center center;
  background-size: contain;

  @for $i from $start through $end {
    &:nth-child(#{$i}) {
      background-image: url($url + "#{$path}#{$i}.png");
    }
  }
}

// * @each
// each문은 lists나 맵의 각각의 요소마다 코드를 실행해서 스타일 적용 가능
/* @each ($변수) in (리스트나 맵){ 
    반복할 내용
} */

// color-palette 리스트에 들어있는 색상을 each문을 사용하여 background에 색상값을 넣어줌
$color-palette: #dad5d2 #3a3532 #375945 #5b8767 #a6c198 #dbdfc8;

@each $color in $color-palette {
  $i: index($color-palette, $color); //index는 list의 내장함수
  .color-circle:nth-child(#{$i}) {
    background: $color;
    width: 20px;
    height: 20px;
    border-radius: 50%;
  }
}

// * @while
// 특정 조건에 충족될 때까지 코드를 무한 반복하며, 조건을 만날 때 while문을 빠져나오게 됨
// 참고로, while문은 빠져나오는 조건을 만드는 경우가 거의 없음

// value값이 base보다 작을 때까지 일정한 값으로 계속 나눠준다.
@function scale-below($value, $base, $ratio: 1.618) {
  @while $value > $base {
    $value: ($value/$ratio);
  }
  @return $value;
}

$normal-font-size: 16px;
.sup {
  font-size: scale-below(20px, 16px);
}

// 쉬운 예제
$hyeonbin: 10;
@while $hyeonbin > 1 {
  $hyeonbin: $hyeonbin - 2;
  .content-#{$hyeonbin} {
    width: 100px;
    height: 100px;
    background: red;
  }
}
