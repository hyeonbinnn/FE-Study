// 다음 배열 내장함수의 시간 복잡도가 O(1)이 아닌 것을 모두 고르시오. (3, 5)

// 1)  arr[i]
// 2)  arr.push(5)
// 3)  arr.slice()
// 4)  arr.pop()
// 5)  arr.includes(5)

// Why?
// 1) 이 연산은 배열에서 특정 인덱스에 접근하는 것이므로, 시간 복잡도는 O(1)
// 2) push() 메서드는 배열의 끝에 요소를 추가하는 연산이기에 배열의 크기에 관계없이 한 번만 수행되므로 시간 복잡도는 O(1)
// 3) slice() 메서드는 배열의 일부분을 추출하여 새로운 배열을 반환하며 배열의 길이에 비례하여 새로운 배열을 생성하므로 시간 복잡도는 O(n)
// 4) pop() 메서드는 배열의 마지막 요소를 제거하고 반환하며 배열의 크기에 관계없이 한 번만 수행되므로 시간 복잡도는 O(1)
// 5) includes() 메서드는 배열에 특정 요소가 포함되어 있는지 확인하는 연산이기에 배열의 모든 요소를 확인해야 하므로 배열의 크기에 비례하여 시간 복잡도는 O(n)

// 시간 복잡도란?
// 알고리즘이 문제를 해결하는 데 걸리는 시간의 증가율
// O(1): 입력 크기와 상관없이 일정한 실행 시간이 소요
// O(n): 입력의 크기에 정비례하여 실행 시간이 선형으로 증가
